var MalinkyAjaxPaging = (function($) {

    var mapPagingType           = malinky_ajax_paging.mapPagingType,
        mapPostsWrapperClass    = malinky_ajax_paging.mapPostsWrapperClass,
        mapPostClass            = malinky_ajax_paging.mapPostClass,
        mapPaginationClass      = malinky_ajax_paging.mapPaginationClass,
        mapMaxNumPages          = parseInt(malinky_ajax_paging.mapMaxNumPages),
        mapNextPage             = parseInt(malinky_ajax_paging.mapNextPage),
        mapNextPageUrl          = malinky_ajax_paging.mapNextPageUrl,
        mapLoadingTimer         = '';


    /**
     * Initialize.
     * Add new pagination and loading div.
     * These are added after the last mapPaginationClass as some theme developers don't wrap pagination
     * but use same class for all elements of it.
     */
    var init = function() {

        if (mapPagingType == 'load-more') {

            $(mapPaginationClass).last().after('<a href="' + mapNextPageUrl + '" class="malinky-ajax-paging-button button full-width">Load More</a>');
            $(mapPaginationClass).last().before('<div class="malinky-ajax-paging-loading"></div>');
            $(mapPaginationClass).remove();
            /**
             * Attach a click event handler to the new pagination button.
             * No longer use delegate event as this click event is added after the new pagination button is added to the dom.
             * OLD The original pagination class is present on the initial page load.
             * OLD When the new .malinky-ajax-paging-button is clicked it bubbles up one level to mapPaginationClass.
             * OLD This is known as a delegated event.
             */
            $('.malinky-ajax-paging-button').click(function(event) {
                event.preventDefault();
                //Delay loading text and div.
                mapLoadingTimer = setTimeout(mapLoading, 750);
                //Load more posts.
                mapLoadPosts();
                /**
                 * Debug timer. Remove mapLoadPosts call and use setTimeout instead.
                 * setTimeout(MalinkyAjaxPaging.mapPosts, 3000);
                 */
            }); 

        } else if (mapPagingType == 'infinite-scroll') {

        } else if (mapPagingType == 'pagination') {

            $(mapPaginationClass).last().before('<div class="malinky-ajax-paging-loading"></div>');
            /**
             * Attach a click event handler to the pagination links.
             */
            $(mapPaginationClass).click(function(event) {
                event.preventDefault();
                //Delay loading text and div.
                mapLoadingTimer = setTimeout(mapLoading, 750);
                //Get the url of the clicked page.
                mapNextPageUrl = $(this).attr('href');
                //Load more posts.
                mapLoadPosts();
                /**
                 * Debug timer. Remove mapLoadPosts call and use setTimeout instead.
                 * setTimeout(MalinkyAjaxPaging.mapPosts, 3000);
                 */
            });
            /**
             * Attach popstate event listener which is triggered on the back button.
             * The url generated by the browser back/forward button is saved in mapNextPageUrl and mapLoadPosts called.
             */
            window.addEventListener('popstate', function(event) {
                mapNextPageUrl = document.URL;
                mapLoadPosts;
            });

        }
     
    };


    /**
     * While new posts are loaded.
     * Add loading text to button.
     * Show loader.gif.
     * This function is called using a setTimeout of 750 in the click event handler.
     */
    var mapLoading = function() {
        $('.malinky-ajax-paging-button').text('Loading...');
        $('.malinky-ajax-paging-loading').show();
    };


    /**
     * After new posts have been loaded.
     * Add loading text to button.
     * Hide loader.gif.
     */
    var mapLoaded = function () {
        $('.malinky-ajax-paging-button').text('Load More');
        $('.malinky-ajax-paging-loading').hide();
    };


    /**
     * Load new posts and append to exists content.
     * The response inserts new posts after the last displayed post that uses the mapPostClass.
     * mapPostsWrapperClass is used to ensure the correct div is targeted.
     */
    var mapLoadPosts = function () {
        $.ajax({
                type:       'GET',
                url:        mapNextPageUrl,
                dataType:   'html',
                success:    function(response) {
                                //Parse HTML first.
                                var mapResponse     = $.parseHTML(response);
                                //Find the actual posts from the full html response using mapPostClass.
                                var mapLoadedPosts  = $(mapResponse).find(mapPostClass);
                                //jQuery object of the last currently displayed post.
                                var $mapInsertPoint = $(mapPostsWrapperClass + ' ' + mapPostClass).last();
                                //Save the existing posts to be removed if mapPagingType == 'pagination'.
                                $mapExistingPosts = $(mapPostClass);
                                //Insert the posts after the last currently displayed post.
                                $mapInsertPoint.after(mapLoadedPosts);
                                
                                if (mapPagingType == 'pagination') {
                                    //Remove existing posts if mapPagingType == 'pagination'.
                                    $mapExistingPosts.remove();
                                    //Update URL and store history for browser back/forward buttons
                                    history.pushState(null, null, mapNextPageUrl);
                                    //Update navigation, active state, next and prev.
                                    //var $mapNewPagination = $(mapResponse).find(mapPaginationClass);
                                    //$(mapPaginationClass).replaceWith($mapNewPagination);
                                }

                                mapNextPageSetup();
                            }
        });
    };


    /**
     * Prepare variables for the next set of posts.
     * This is called in the success callback of of $a.ajax in mapLoadPosts().
     */
    var mapNextPageSetup = function() {
        //Remove loading div and clear timers.
        mapLoaded();
        clearTimeout(mapLoadingTimer);
        //Increment page number.
        mapNextPage++;
        //Check we're not on the last page and all posts have been loaded.
        if (mapNextPage > mapMaxNumPages) {
            $('.malinky-ajax-paging-button').remove();
            return false;
        }
        //Update next page url.
        mapNextPageUrl = mapNextPageUrl.replace(/\/page\/[0-9]*/, '/page/'+ mapNextPage);
    };


    //Add new pagination button and click event handler.
    init();

})(jQuery);